<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/aop
				http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context-4.3.xsd
				http://www.springframework.org/schema/mvc
				http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
				http://www.springframework.org/schema/tx
				http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
">

    <!--开启注解的扫描-->
    <context:component-scan base-package="cn.itcast"/>

    <!--Spring整合MyBatis框架-->

    <!--  导入数据源设置的属性文件 -->
    <context:property-placeholder location="classpath:db.properties" />
    <!--配置连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" lazy-init="true">
        <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!-- 配置SqlSessionFactory工厂对象  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="cn.itcast.domain" />   <!-- value是实体类所在包 -->
        <!-- 扫描sql的Mapper需要的xml文件配置文件: 如果有xml映射文件，则需要添加以下项  -->
        <property name="mapperLocations" value="classpath:cn.itcast.mapper/*.xml" />

    </bean>

    <!-- 4. 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.itcast.dao"></property>  <!-- 根据dao层所在包进行修改 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>

    </bean>

    <!--配置Spring框架声明式事务管理-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>  <!-- 读取数据隔离级别为只读 -->
            <tx:method name="*"/> <!-- 其他操作使用默认隔离级别 -->
        </tx:attributes>
    </tx:advice>

    <!--配置AOP增强-->
    <aop:config>
        <aop:pointcut expression="execution(* cn.itcast.service.*.*(..))" id="txPointcut"/>    <!-- 修改service所在的包 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>


    <context:component-scan base-package="cn.itcast.socket"/>

    <!-- 把Netty的一些类服务器注册到Spring，方便处理和扩展 -->
    <!-- 用于处理客户端连接请求 -->
    <bean id="bossGroup" class="io.netty.channel.nio.NioEventLoopGroup"/>
    <!-- 用于处理客户端I/O操作 -->
    <bean id="workerGroup" class="io.netty.channel.nio.NioEventLoopGroup"/>
    <!-- 服务器启动引导类 -->
    <bean id="serverBootstrap" class="io.netty.bootstrap.ServerBootstrap" scope="prototype"/>
    <!-- 自定义的Netty Websocket服务器 -->
    <bean id="webSocketServer" class="cn.itcast.socket.WebSocketServer">
        <property name="port" value="3333"/>
        <property name="childChannelHandler" ref="webSocketChildChannelHandler" />
    </bean>




</beans>